//
//  StarKit.swift
//  StarKit
//
//  Created by 86 on 2015/10/13.
//  Copyright (c) 2015 . All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StarKit : NSObject {

    //// Cache

    private struct Cache {
        static let onColor: UIColor = UIColor(red: 1.000, green: 0.917, blue: 0.314, alpha: 0.904)
        static let offColor: UIColor = UIColor(red: 0.739, green: 0.759, blue: 0.693, alpha: 1.000)
    }

    //// Colors

    public class var onColor: UIColor { return Cache.onColor }
    public class var offColor: UIColor { return Cache.offColor }

    //// Drawing Methods

    public class func drawStar(frame frame: CGRect = CGRectMake(0, 0, 100, 100), on: Bool = true) {
        //// Color Declarations
        let onColorShadow = StarKit.onColor.colorWithShadow(0.05)

        //// Variable Declarations
        let colorLeft = on == true ? StarKit.onColor : StarKit.offColor
        let colorRight = on == true ? onColorShadow : StarKit.offColor


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.03447 + 0.05) + 0.45, frame.minY + floor(frame.height * 0.07000 - 0.05) + 0.55, floor(frame.width * 0.96553 - 0.05) - floor(frame.width * 0.03447 + 0.05) + 0.11, floor(frame.height * 0.91451 + 0.5) - floor(frame.height * 0.07000 - 0.05) - 0.55)


        //// Group
        //// Star Right Drawing
        let starRightPath = UIBezierPath()
        starRightPath.moveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.00000 * group.height))
        starRightPath.addLineToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.76734 * group.height))
        starRightPath.addLineToPoint(CGPointMake(group.minX + 0.80902 * group.width, group.minY + 1.00000 * group.height))
        starRightPath.addLineToPoint(CGPointMake(group.minX + 0.69406 * group.width, group.minY + 0.61909 * group.height))
        starRightPath.addLineToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.38197 * group.height))
        starRightPath.addLineToPoint(CGPointMake(group.minX + 0.61994 * group.width, group.minY + 0.37921 * group.height))
        starRightPath.addLineToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.00000 * group.height))
        starRightPath.closePath()
        colorRight.setFill()
        starRightPath.fill()


        //// Star Left Drawing
        let starLeftPath = UIBezierPath()
        starLeftPath.moveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.00000 * group.height))
        starLeftPath.addLineToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.76734 * group.height))
        starLeftPath.addLineToPoint(CGPointMake(group.minX + 0.19098 * group.width, group.minY + 1.00000 * group.height))
        starLeftPath.addLineToPoint(CGPointMake(group.minX + 0.30594 * group.width, group.minY + 0.61909 * group.height))
        starLeftPath.addLineToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.38197 * group.height))
        starLeftPath.addLineToPoint(CGPointMake(group.minX + 0.38006 * group.width, group.minY + 0.37921 * group.height))
        starLeftPath.addLineToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.00000 * group.height))
        starLeftPath.closePath()
        colorLeft.setFill()
        starLeftPath.fill()
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
